// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type CrawlErrorCode string

const (
	CrawlErrorCodeUnknown                              CrawlErrorCode = "unknown"
	CrawlErrorCodeTimeout                              CrawlErrorCode = "timeout"
	CrawlErrorCodeDomainNotFound                       CrawlErrorCode = "domain_not_found"
	CrawlErrorCodeUnreachable                          CrawlErrorCode = "unreachable"
	CrawlErrorCodeInvalidNodeinfo                      CrawlErrorCode = "invalid_nodeinfo"
	CrawlErrorCodeNodeinfoVersionNotSupportedByCrawler CrawlErrorCode = "nodeinfo_version_not_supported_by_crawler"
	CrawlErrorCodeInvalidJson                          CrawlErrorCode = "invalid_json"
	CrawlErrorCodeBlockedByRobotsTxt                   CrawlErrorCode = "blocked_by_robots_txt"
	CrawlErrorCodeSoftwareNotSupportedByCrawler        CrawlErrorCode = "software_not_supported_by_crawler"
	CrawlErrorCodeSoftwareVersionNotSupportedByCrawler CrawlErrorCode = "software_version_not_supported_by_crawler"
	CrawlErrorCodeInternalError                        CrawlErrorCode = "internal_error"
)

func (e *CrawlErrorCode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrawlErrorCode(s)
	case string:
		*e = CrawlErrorCode(s)
	default:
		return fmt.Errorf("unsupported scan type for CrawlErrorCode: %T", src)
	}
	return nil
}

type NullCrawlErrorCode struct {
	CrawlErrorCode CrawlErrorCode
	Valid          bool // Valid is true if CrawlErrorCode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrawlErrorCode) Scan(value interface{}) error {
	if value == nil {
		ns.CrawlErrorCode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrawlErrorCode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrawlErrorCode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrawlErrorCode), nil
}

type CrawlStatus string

const (
	CrawlStatusUnknown   CrawlStatus = "unknown"
	CrawlStatusCompleted CrawlStatus = "completed"
	CrawlStatusFailed    CrawlStatus = "failed"
)

func (e *CrawlStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrawlStatus(s)
	case string:
		*e = CrawlStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CrawlStatus: %T", src)
	}
	return nil
}

type NullCrawlStatus struct {
	CrawlStatus CrawlStatus
	Valid       bool // Valid is true if CrawlStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrawlStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CrawlStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrawlStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrawlStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrawlStatus), nil
}

type InstanceStatus string

const (
	InstanceStatusUnknown   InstanceStatus = "unknown"
	InstanceStatusUp        InstanceStatus = "up"
	InstanceStatusDown      InstanceStatus = "down"
	InstanceStatusUnhealthy InstanceStatus = "unhealthy"
)

func (e *InstanceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InstanceStatus(s)
	case string:
		*e = InstanceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InstanceStatus: %T", src)
	}
	return nil
}

type NullInstanceStatus struct {
	InstanceStatus InstanceStatus
	Valid          bool // Valid is true if InstanceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInstanceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InstanceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InstanceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInstanceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InstanceStatus), nil
}

type Crawl struct {
	ID                pgtype.UUID
	InstanceID        pgtype.UUID
	Status            CrawlStatus
	ErrorCode         NullCrawlErrorCode
	ErrorMsg          pgtype.Text
	StartedAt         pgtype.Timestamptz
	FinishedAt        pgtype.Timestamptz
	SoftwareName      pgtype.Text
	SoftwareVersion   pgtype.Text
	NumberOfPeers     pgtype.Int4
	OpenRegistrations pgtype.Bool
	TotalUsers        pgtype.Int4
	ActiveHalfYear    pgtype.Int4
	ActiveMonth       pgtype.Int4
	LocalPosts        pgtype.Int4
	LocalComments     pgtype.Int4
	RawNodeinfo       []byte
	Addresses         []netip.Addr
}

type CrawlError struct {
	ErrorCode   CrawlErrorCode
	Description string
}

type Instance struct {
	ID           pgtype.UUID
	Domain       string
	Status       InstanceStatus
	CreatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	SoftwareName pgtype.Text
	LastCrawlID  pgtype.UUID
}

type PeeringRelationship struct {
	InstanceID pgtype.UUID
	PeerID     pgtype.UUID
}
