// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ServerStatus string

const (
	ServerStatusActive   ServerStatus = "active"
	ServerStatusInactive ServerStatus = "inactive"
	ServerStatusDeleted  ServerStatus = "deleted"
	ServerStatusError    ServerStatus = "error"
	ServerStatusUnknown  ServerStatus = "unknown"
)

func (e *ServerStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServerStatus(s)
	case string:
		*e = ServerStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ServerStatus: %T", src)
	}
	return nil
}

type NullServerStatus struct {
	ServerStatus ServerStatus
	Valid        bool // Valid is true if ServerStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServerStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ServerStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServerStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServerStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServerStatus), nil
}

type Crawl struct {
	ID                pgtype.UUID
	ServerID          pgtype.UUID
	CreatedAt         pgtype.Timestamptz
	NumberOfPeers     int32
	OpenRegistrations bool
	TotalUsers        pgtype.Int4
	ActiveHalfYear    pgtype.Int4
	ActiveMonth       pgtype.Int4
	LocalPosts        pgtype.Int4
	LocalComments     pgtype.Int4
}

type PeeringRelationship struct {
	ServerID pgtype.UUID
	PeerID   pgtype.UUID
}

type Server struct {
	ID           pgtype.UUID
	Domain       string
	Status       ServerStatus
	CreatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	SoftwareName pgtype.Text
	LastCrawlID  pgtype.UUID
}
