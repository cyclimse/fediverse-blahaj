// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CrawlStatus.
const (
	CrawlStatusCompleted CrawlStatus = "completed"
	CrawlStatusFailed    CrawlStatus = "failed"
	CrawlStatusUnknown   CrawlStatus = "unknown"
)

// Defines values for InstanceStatus.
const (
	InstanceStatusDown      InstanceStatus = "down"
	InstanceStatusUnhealthy InstanceStatus = "unhealthy"
	InstanceStatusUnknown   InstanceStatus = "unknown"
	InstanceStatusUp        InstanceStatus = "up"
)

// Crawl defines model for Crawl.
type Crawl struct {
	ActiveUsersHalfYear  *int32                  `json:"active_users_half_year,omitempty"`
	ActiveUsersMonth     *int32                  `json:"active_users_month,omitempty"`
	DurationSeconds      float64                 `json:"duration_seconds"`
	ErrorCode            *string                 `json:"errorCode,omitempty"`
	ErrorCodeDescription *string                 `json:"errorCodeDescription,omitempty"`
	FinishedAt           time.Time               `json:"finished_at"`
	Id                   openapi_types.UUID      `json:"id"`
	InstanceId           openapi_types.UUID      `json:"instance_id"`
	LocalComments        *int32                  `json:"local_comments,omitempty"`
	LocalPosts           *int32                  `json:"local_posts,omitempty"`
	NumberOfPeers        *int32                  `json:"number_of_peers,omitempty"`
	RawNodeinfo          *map[string]interface{} `json:"raw_nodeinfo,omitempty"`
	StartedAt            time.Time               `json:"started_at"`
	Status               CrawlStatus             `json:"status"`
	TotalUsers           *int32                  `json:"total_users,omitempty"`
}

// CrawlStatus defines model for Crawl.Status.
type CrawlStatus string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Instance defines model for Instance.
type Instance struct {
	ActiveUsersHalfYear *int32             `json:"active_users_half_year,omitempty"`
	ActiveUsersMonth    *int32             `json:"active_users_month,omitempty"`
	Description         *string            `json:"description,omitempty"`
	Domain              string             `json:"domain"`
	Id                  openapi_types.UUID `json:"id"`
	LocalComments       *int32             `json:"local_comments,omitempty"`
	LocalPosts          *int32             `json:"local_posts,omitempty"`
	NumberOfPeers       *int32             `json:"number_of_peers,omitempty"`
	OpenRegistrations   *bool              `json:"open_registrations,omitempty"`
	Software            *string            `json:"software,omitempty"`
	Status              InstanceStatus     `json:"status"`
	TotalUsers          *int32             `json:"total_users,omitempty"`
	Version             *string            `json:"version,omitempty"`
}

// InstanceStatus defines model for Instance.Status.
type InstanceStatus string

// ListInstancesParams defines parameters for ListInstances.
type ListInstancesParams struct {
	// Software filter by software name.
	Software *string `form:"software,omitempty" json:"software,omitempty"`

	// Page page number of results to return
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of results to return per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListCrawlsForInstanceParams defines parameters for ListCrawlsForInstance.
type ListCrawlsForInstanceParams struct {
	// Page page number of results to return
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of results to return per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all instances
	// (GET /instances)
	ListInstances(ctx echo.Context, params ListInstancesParams) error
	// Info for a specific instance
	// (GET /instances/{id})
	GetInstanceByID(ctx echo.Context, id openapi_types.UUID) error
	// List all crawls for a instance
	// (GET /instances/{id}/crawls)
	ListCrawlsForInstance(ctx echo.Context, id openapi_types.UUID, params ListCrawlsForInstanceParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) ListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListInstancesParams
	// ------------- Optional query parameter "software" -------------

	err = runtime.BindQueryParameter("form", true, false, "software", ctx.QueryParams(), &params.Software)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter software: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter per_page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListInstances(ctx, params)
	return err
}

// GetInstanceByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceByID(ctx, id)
	return err
}

// ListCrawlsForInstance converts echo context to params.
func (w *ServerInterfaceWrapper) ListCrawlsForInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCrawlsForInstanceParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter per_page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCrawlsForInstance(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/instances", wrapper.ListInstances)
	router.GET(baseURL+"/instances/:id", wrapper.GetInstanceByID)
	router.GET(baseURL+"/instances/:id/crawls", wrapper.ListCrawlsForInstance)

}

type ListInstancesRequestObject struct {
	Params ListInstancesParams
}

type ListInstancesResponseObject interface {
	VisitListInstancesResponse(w http.ResponseWriter) error
}

type ListInstances200JSONResponse struct {
	Page    int32      `json:"page"`
	PerPage int32      `json:"per_page"`
	Results []Instance `json:"results"`
	Total   int64      `json:"total"`
}

func (response ListInstances200JSONResponse) VisitListInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListInstancesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListInstancesdefaultJSONResponse) VisitListInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetInstanceByIDRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetInstanceByIDResponseObject interface {
	VisitGetInstanceByIDResponse(w http.ResponseWriter) error
}

type GetInstanceByID200JSONResponse Instance

func (response GetInstanceByID200JSONResponse) VisitGetInstanceByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInstanceByIDdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetInstanceByIDdefaultJSONResponse) VisitGetInstanceByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListCrawlsForInstanceRequestObject struct {
	Id     openapi_types.UUID `json:"id"`
	Params ListCrawlsForInstanceParams
}

type ListCrawlsForInstanceResponseObject interface {
	VisitListCrawlsForInstanceResponse(w http.ResponseWriter) error
}

type ListCrawlsForInstance200JSONResponse struct {
	Page    int32   `json:"page"`
	PerPage int32   `json:"per_page"`
	Results []Crawl `json:"results"`
	Total   int64   `json:"total"`
}

func (response ListCrawlsForInstance200JSONResponse) VisitListCrawlsForInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCrawlsForInstancedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListCrawlsForInstancedefaultJSONResponse) VisitListCrawlsForInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all instances
	// (GET /instances)
	ListInstances(ctx context.Context, request ListInstancesRequestObject) (ListInstancesResponseObject, error)
	// Info for a specific instance
	// (GET /instances/{id})
	GetInstanceByID(ctx context.Context, request GetInstanceByIDRequestObject) (GetInstanceByIDResponseObject, error)
	// List all crawls for a instance
	// (GET /instances/{id}/crawls)
	ListCrawlsForInstance(ctx context.Context, request ListCrawlsForInstanceRequestObject) (ListCrawlsForInstanceResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListInstances operation middleware
func (sh *strictHandler) ListInstances(ctx echo.Context, params ListInstancesParams) error {
	var request ListInstancesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListInstances(ctx.Request().Context(), request.(ListInstancesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListInstances")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListInstancesResponseObject); ok {
		return validResponse.VisitListInstancesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetInstanceByID operation middleware
func (sh *strictHandler) GetInstanceByID(ctx echo.Context, id openapi_types.UUID) error {
	var request GetInstanceByIDRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInstanceByID(ctx.Request().Context(), request.(GetInstanceByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInstanceByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInstanceByIDResponseObject); ok {
		return validResponse.VisitGetInstanceByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ListCrawlsForInstance operation middleware
func (sh *strictHandler) ListCrawlsForInstance(ctx echo.Context, id openapi_types.UUID, params ListCrawlsForInstanceParams) error {
	var request ListCrawlsForInstanceRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListCrawlsForInstance(ctx.Request().Context(), request.(ListCrawlsForInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCrawlsForInstance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListCrawlsForInstanceResponseObject); ok {
		return validResponse.VisitListCrawlsForInstanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/jNhD9KwTbo1ZykqIHnZomaWFg0V0gvQWBMJFGFrfix5KjOIbh/16QkiXZVmIt",
	"2kNa7E2xZjhf772hsuW5lkYrVOR4uuUur1BCeLyxsK79g7HaoCWB4WfISTxj1ji0LqugLrMNgvVvSm0l",
	"EE+5UHR1ySNOG4Ptn7hCy3fRobPUiqqZjkVjgYRWmcNcq8IduBW6eapx8FONfGrd0Fptb3SB3r5768gK",
	"tTp4e4sut8L4AJOGpVDCVVhkPtw4MBB+ICFHsQcnURzYNo0oJs2UI1A5ZjPta51DneVayv3MZrSvdTLa",
	"zfZoe5jpMjOIdq6XhXWmdIFClXrUSf30BXPyBo7A0jc20hFQEzJA1UiePvBG/aX0WvEooLdGQt+qEkSN",
	"BX+cOII0Qd3CblYlvhT82giLhY8XJjEe1EEhh/iYwGpfwpDa0JE7D8JTmuUdaGc0XaJzsJqC+FEZ4czB",
	"fiqbZVfku+H9GWYWWoKYfvV/4JM2qDKLK+GoxZQblfqkdY2gAkV0SWuw0zL3Fn8a4wHbPasKoaZq869Q",
	"KOLPaN303Kbo1U3yDa7sglq2wpJrRZAHEUEJouYpByMIQf7i1rBaoY2F5hFXIP0R9+1v7Przkv2JIH21",
	"1jtVRCZNkpHPMej4NXPgRSY4UwXEGoeOATNIjrRFBo6BYvjSmpFmBUqtwsiQlQjUWHRMKEYVsk8GlT/p",
	"Kl4wZzAXpcjDaHnEa5GjcmGKXeLXBvIK2WW8OEjZpUmyXq9jCK9jbVdJ5+uSj8ubuz/u7z5cxou4IlmH",
	"4aGV7lN5j/ZZeHKf1p0Ek8QPUlA97tnnrkw+mihfxBfxYry+HE8ftkcZ7hsUj8I8X/LdYwtsMIKn/Cqc",
	"FHEDVAVkJaMjt3yFYcheiUKXlgVP+UfhaNlbeV8LEilA82F7NL9S1ISWPW3YniXMNzfmEe9GxlMuwZEu",
	"whC8nPCvDdrNgJ+eX1F3Q3qFaJtwmOcG30XHiRhYIWt1gOmSWXRNTc7jxSI19rXY3u0gboElNDXx9CI6",
	"paEUSkjP8ouprXac0hvZMIOWdbEn00KbvZ7a1WIqN3jpclsszmT66BXCGe0R7Q++XCz2tEcVEAHG1B1z",
	"ki+ulZkhkcPdZbr1OEO0+rJmXnjatnlrQSjDw48WS57yH5Lhap109+qk36+7/jSwFja9wh7H/fmn89eT",
	"fRL7I6I9ZvpipsX0BJ5CAWHBQkYeFAMTg3U3228Yw1utaC8+E4k0Cl8M5j4T7Gwi7hopwW468jOo63F2",
	"u2gkG8lWFLtXteN37KXj183y9px6LG99I7xw78/3FCmR8mpPDK9cAy/CMhumQ7bBMUPO3Ef+MfDnge+0",
	"6X11++jvaeRLVWpWasugX5n9OKaGn+T+2/Xt/RE+b91v2vZdeWdI+L4/vu+PEwa1/5T5TyyPjoPvcXO0",
	"qXWKMhKS3e7vAAAA//92k4A/EBMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
