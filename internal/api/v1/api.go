// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CrawlStatus.
const (
	Failed   CrawlStatus = "failed"
	Finished CrawlStatus = "finished"
	Pending  CrawlStatus = "pending"
	Running  CrawlStatus = "running"
)

// Defines values for ServerStatus.
const (
	Active   ServerStatus = "active"
	Inactive ServerStatus = "inactive"
	Unknown  ServerStatus = "unknown"
)

// Crawl defines model for Crawl.
type Crawl struct {
	ActiveUsersHalfYear *int32             `json:"active_users_half_year,omitempty"`
	ActiveUsersMonth    *int32             `json:"active_users_month,omitempty"`
	Error               *string            `json:"error,omitempty"`
	FinishedAt          time.Time          `json:"finished_at"`
	Id                  openapi_types.UUID `json:"id"`
	LocalComments       *int32             `json:"local_comments,omitempty"`
	LocalPosts          *int32             `json:"local_posts,omitempty"`
	NumberOfPeers       *int32             `json:"number_of_peers,omitempty"`
	ServerId            openapi_types.UUID `json:"server_id"`
	StartedAt           time.Time          `json:"started_at"`
	Status              CrawlStatus        `json:"status"`
	TotalUsers          *int32             `json:"total_users,omitempty"`
}

// CrawlStatus defines model for Crawl.Status.
type CrawlStatus string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Server defines model for Server.
type Server struct {
	ActiveUsersHalfYear *int32             `json:"active_users_half_year,omitempty"`
	ActiveUsersMonth    *int32             `json:"active_users_month,omitempty"`
	Description         *string            `json:"description,omitempty"`
	Domain              string             `json:"domain"`
	Id                  openapi_types.UUID `json:"id"`
	LocalComments       *int32             `json:"local_comments,omitempty"`
	LocalPosts          *int32             `json:"local_posts,omitempty"`
	NumberOfPeers       *int32             `json:"number_of_peers,omitempty"`
	OpenRegistrations   *bool              `json:"open_registrations,omitempty"`
	Software            *string            `json:"software,omitempty"`
	Status              ServerStatus       `json:"status"`
	TotalUsers          *int32             `json:"total_users,omitempty"`
	Version             *string            `json:"version,omitempty"`
}

// ServerStatus defines model for Server.Status.
type ServerStatus string

// ListServersParams defines parameters for ListServers.
type ListServersParams struct {
	// Software filter by software name.
	Software *string `form:"software,omitempty" json:"software,omitempty"`

	// Page page number of results to return
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of results to return per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ListCrawlsForServerParams defines parameters for ListCrawlsForServer.
type ListCrawlsForServerParams struct {
	// Page page number of results to return
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of results to return per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all servers
	// (GET /servers)
	ListServers(ctx echo.Context, params ListServersParams) error
	// Info for a specific server
	// (GET /servers/{id})
	GetServerByID(ctx echo.Context, id openapi_types.UUID) error
	// List all crawls for a server
	// (GET /servers/{id}/crawls)
	ListCrawlsForServer(ctx echo.Context, id openapi_types.UUID, params ListCrawlsForServerParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListServers converts echo context to params.
func (w *ServerInterfaceWrapper) ListServers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServersParams
	// ------------- Optional query parameter "software" -------------

	err = runtime.BindQueryParameter("form", true, false, "software", ctx.QueryParams(), &params.Software)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter software: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter per_page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListServers(ctx, params)
	return err
}

// GetServerByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetServerByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServerByID(ctx, id)
	return err
}

// ListCrawlsForServer converts echo context to params.
func (w *ServerInterfaceWrapper) ListCrawlsForServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCrawlsForServerParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter per_page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCrawlsForServer(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/servers", wrapper.ListServers)
	router.GET(baseURL+"/servers/:id", wrapper.GetServerByID)
	router.GET(baseURL+"/servers/:id/crawls", wrapper.ListCrawlsForServer)

}

type ListServersRequestObject struct {
	Params ListServersParams
}

type ListServersResponseObject interface {
	VisitListServersResponse(w http.ResponseWriter) error
}

type ListServers200JSONResponse struct {
	Page    *int32    `json:"page,omitempty"`
	PerPage *int32    `json:"per_page,omitempty"`
	Results *[]Server `json:"results,omitempty"`
	Total   *int32    `json:"total,omitempty"`
}

func (response ListServers200JSONResponse) VisitListServersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListServersdefaultJSONResponse) VisitListServersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetServerByIDRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetServerByIDResponseObject interface {
	VisitGetServerByIDResponse(w http.ResponseWriter) error
}

type GetServerByID200JSONResponse Server

func (response GetServerByID200JSONResponse) VisitGetServerByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServerByIDdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetServerByIDdefaultJSONResponse) VisitGetServerByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListCrawlsForServerRequestObject struct {
	Id     openapi_types.UUID `json:"id"`
	Params ListCrawlsForServerParams
}

type ListCrawlsForServerResponseObject interface {
	VisitListCrawlsForServerResponse(w http.ResponseWriter) error
}

type ListCrawlsForServer200JSONResponse struct {
	Page    *int32   `json:"page,omitempty"`
	PerPage *int32   `json:"per_page,omitempty"`
	Results *[]Crawl `json:"results,omitempty"`
	Total   *int32   `json:"total,omitempty"`
}

func (response ListCrawlsForServer200JSONResponse) VisitListCrawlsForServerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCrawlsForServerdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListCrawlsForServerdefaultJSONResponse) VisitListCrawlsForServerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all servers
	// (GET /servers)
	ListServers(ctx context.Context, request ListServersRequestObject) (ListServersResponseObject, error)
	// Info for a specific server
	// (GET /servers/{id})
	GetServerByID(ctx context.Context, request GetServerByIDRequestObject) (GetServerByIDResponseObject, error)
	// List all crawls for a server
	// (GET /servers/{id}/crawls)
	ListCrawlsForServer(ctx context.Context, request ListCrawlsForServerRequestObject) (ListCrawlsForServerResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListServers operation middleware
func (sh *strictHandler) ListServers(ctx echo.Context, params ListServersParams) error {
	var request ListServersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServers(ctx.Request().Context(), request.(ListServersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListServersResponseObject); ok {
		return validResponse.VisitListServersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetServerByID operation middleware
func (sh *strictHandler) GetServerByID(ctx echo.Context, id openapi_types.UUID) error {
	var request GetServerByIDRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServerByID(ctx.Request().Context(), request.(GetServerByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServerByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetServerByIDResponseObject); ok {
		return validResponse.VisitGetServerByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ListCrawlsForServer operation middleware
func (sh *strictHandler) ListCrawlsForServer(ctx echo.Context, id openapi_types.UUID, params ListCrawlsForServerParams) error {
	var request ListCrawlsForServerRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListCrawlsForServer(ctx.Request().Context(), request.(ListCrawlsForServerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCrawlsForServer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListCrawlsForServerResponseObject); ok {
		return validResponse.VisitListCrawlsForServerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/jNhP9KwS/71FrOcmbnprupoWBRXeB9C0IjIk0srgVLzscxTEC//eCFGX5omS9",
	"bYEGxb4xIud65hzSeZal1c4aNOxl8Sx92aCGuHxPsG7DwpF1SKwwfoaS1SMuO4/klw209XKDQGGntqSB",
	"ZSGV4atLmUneOOz/xBWS3GaHxtoabs40RCIbg6Qtz6TMKuzUyijfYLUMHvZ8VcD4jpXG0d9opKqDs12n",
	"qqljrS2hXZZW66E/Z6TaGznrz7YwnX5AWtp66RDpXCuP9Ii0PLMUz0D8nV3yDNzFdNB0WhZ30qGpwmYm",
	"qTOmXw0AhCWoFit5P+GLLUPbA39WfdtMEn7tFGEVAseixooP6jmcgV3aYxb24QuWHLK4GcbocKZLW+GZ",
	"XdfoPaxwYhSPMo4+x/NT2dzGet4KxSr0JSnHyppJolVWg5re+i/QyTo0S8KV8kwQmuD3Sn2wtkUwkRS2",
	"5jUQTjbilDE9HDKTyuyWnfnD2LX5R3iSyUckP43ZFIcSiq+wJJgpU9ueGIahjJKBGlQrCwlOMYL+ya9h",
	"tUKaKSszaUAHF7f9N3H9eSF+R9ChVgpGDbMr8nzP5njg5LXwoF2L0ZgbYNF59AKEQ/ZsCQV4AUbgU3+M",
	"rahQWxPhQlEjcEfohTKCGxSfHJrg6Wo2F95hqWpVRlhlJltVovERwZT4tYOyQXE5mx+k7Is8X6/XM4jb",
	"M0urPNn6/OPi/c1vtzfvLmfzWcO6jeAhaf+pDrxWJU7VnccjeQBScbvfs8+pTLmHqJzPLmbzYTrBKVnI",
	"q/gpkw64iSOS97IY1yuMWAUxicUuKlnIj8rzbToT7Ag0cjS4ez4CoVYtI4mHjRjGXIQOzWQmU99lITV4",
	"tlXsZNAD+bVD2oxDsCNIll4TLzBlE52FAZfb7DgRBysUPZGFrQWh71r2AXRC7uil2MHsIO4Z98xx6Fei",
	"CockUozJ8EjLv5DCfeCpdzbMVbC4nM8H8qGJgIJzbZrf/IvvyT5GOLw9XLqeKqyha1kWF9lpDloZpYNC",
	"XUxJyq6OfTdX8yk/8JT8zOff8praGZwqRh0X/yesZSH/l4/P0Dy9QfN0PW53voAINjuRPPcZMSFvJ7Om",
	"DDBWIgYIyA+UimdT/d8ByGtV9U+QiTQ6g08Oy5AHpjOZ9J3WQJvEYgFtO+a2zXbcz59VtX1RAH7FxP+f",
	"N4sP35KAxYfQgCChve8w/TVy2QwzH4RnHPl4qYy3DFOHk8M//Sb426N/zvyctjpVNkR+SzAvTG1FbUnA",
	"7tpKQJwCnpfhJ9rrwh9/xflfLKVuvCn0f8j+D9k/YU7/f4d/Q/UTnd6i6PepDcKwJ2y7x9/d89HDdXg3",
	"z/Zen4+Xcnu//TMAAP//rwBDovURAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
