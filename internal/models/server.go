package models

// Package models contains the models for the application logic.
// Different from the db models generated by sqlc.
// This avoids coupling the orchestrator and the crawler to the db models.

import (
	nodeinfo "github.com/cyclimse/fediverse-blahaj/pkg/nodeinfo/unversioned"
	"github.com/google/uuid"
	"golang.org/x/exp/constraints"
)

func convertPtrToInt32[T constraints.Integer](i *T) *int32 {
	if i == nil {
		return nil
	}
	v := int32(*i)
	return &v
}

func ServerFromCrawlResult(domain string, n nodeinfo.Nodeinfo, peers []string, err error, status string) FediverseServer {
	srv := FediverseServer{
		Domain:      domain,
		CrawlErr:    err,
		CrawlStatus: status,

		Peers: peers,
	}
	if peers != nil {
		*srv.NumberOfPeers = int32(len(peers))
	}

	if n != nil {
		*srv.SoftwareName = n.GetSoftwareName()
		*srv.OpenRegistrations = n.IsRegistrationOpen()
		srv.TotalUsers = convertPtrToInt32(n.TotalUsers())
		srv.ActiveHalfyear = convertPtrToInt32(n.ActiveUsersHalfyear())
		srv.ActiveMonth = convertPtrToInt32(n.ActiveUsersMonth())
		srv.LocalPosts = convertPtrToInt32(n.LocalPosts())
		srv.LocalComments = convertPtrToInt32(n.LocalComments())
	}

	return srv
}

type FediverseServer struct {
	ID     uuid.UUID
	Domain string

	CrawlErr    error
	CrawlStatus string

	Peers         []string
	NumberOfPeers *int32

	SoftwareName *string

	// depending on the nodeinfo version, these fields may be nil
	OpenRegistrations *bool
	TotalUsers        *int32
	ActiveHalfyear    *int32
	ActiveMonth       *int32
	LocalPosts        *int32
	LocalComments     *int32
}

func (s FediverseServer) String() string {
	return s.Domain
}
