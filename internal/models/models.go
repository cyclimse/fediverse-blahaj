package models

// Package models contains the models for the application logic.
// Different from the db models generated by sqlc.
// This avoids coupling the orchestrator and the crawler to the db models.

import (
	"encoding/json"
	"net/netip"
	"time"

	"github.com/google/uuid"
)

type CrawlStatus string

const (
	CrawlStatusUnknown   CrawlStatus = "unknown"
	CrawlStatusCompleted CrawlStatus = "completed"
	CrawlStatusFailed    CrawlStatus = "failed"
)

type CrawlErrCode string

const (
	CrawlErrCodeUnknown                            CrawlErrCode = "unknown"
	CrawlErrCodeTimeout                            CrawlErrCode = "timeout"
	CrawlErrCodeDomainNotFound                     CrawlErrCode = "domain_not_found"
	CrawlErrCodeUnreachable                        CrawlErrCode = "unreachable"
	CrawlErrCodeInvalidNodeinfo                    CrawlErrCode = "invalid_nodeinfo"
	CrawlErrCodeNodeinfoVersionNotSupportedByCrawl CrawlErrCode = "nodeinfo_version_not_supported_by_crawler"
	CrawlErrCodeInvalidJSON                        CrawlErrCode = "invalid_json"
	CrawlErrCodeBlockedByRobotsTxt                 CrawlErrCode = "blocked_by_robots_txt"
	CrawlErrCodeSoftwareNotSupportedByCrawler      CrawlErrCode = "software_not_supported_by_crawler"
	CrawlErrCodeSoftwareVersionNotSupportedByCrawl CrawlErrCode = "software_version_not_supported_by_crawler"
	CrawlErrCodeInternalError                      CrawlErrCode = "internal_error"
)

type CrawlError struct {
	Msg  string
	Code CrawlErrCode
	// The description gets provided by the database via the error code.
	Description string
}

func (e CrawlError) Error() string {
	return e.Msg
}

func (e CrawlError) DerivedInstanceStatus() FediverseInstanceStatus {
	switch e.Code {
	case CrawlErrCodeDomainNotFound, CrawlErrCodeUnreachable, CrawlErrCodeInvalidNodeinfo, CrawlErrCodeInvalidJSON, CrawlErrCodeBlockedByRobotsTxt:
		return FediverseInstanceStatusDown
	case CrawlErrCodeSoftwareNotSupportedByCrawler, CrawlErrCodeSoftwareVersionNotSupportedByCrawl:
		return FediverseInstanceStatusUnhealthy
	default:
		return FediverseInstanceStatusUnknown
	}
}

type Crawl struct {
	ID         uuid.UUID
	StartedAt  time.Time
	FinishedAt time.Time

	InstanceID uuid.UUID
	Domain     string
	Addresses  []netip.Addr

	Status CrawlStatus
	Err    *CrawlError

	Peers         []string
	NumberOfPeers *int32

	SoftwareName    *string
	SoftwareVersion *string

	// depending on the nodeinfo version, these fields may be nil
	OpenRegistrations *bool
	TotalUsers        *int32
	ActiveHalfyear    *int32
	ActiveMonth       *int32
	LocalPosts        *int32
	LocalComments     *int32

	RawNodeinfo json.RawMessage
}

type FediverseInstanceStatus string

const (
	FediverseInstanceStatusUnknown   FediverseInstanceStatus = "unknown"
	FediverseInstanceStatusUp        FediverseInstanceStatus = "up"
	FediverseInstanceStatusDown      FediverseInstanceStatus = "down"
	FediverseInstanceStatusUnhealthy FediverseInstanceStatus = "unhealthy"
)

type FediverseInstance struct {
	ID     uuid.UUID
	Domain string
	Status string

	// this property is extracted from the crawl
	// it is also stored in the instance table to allow
	// searching for instances by software
	SoftwareName *string

	LastCrawl *Crawl
}

func (s FediverseInstance) String() string {
	return s.Domain
}
